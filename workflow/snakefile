#################################
#### Short reads co-assembly ####
#################################


#################################
#### Import Python libraries ####
#################################
import glob
import yaml

#################################
#### Define Global Variables ####
#################################


# Extract all samples
SAMPLES,RF=glob_wildcards("../resources/Data/{sample}_{rf}.fastq.gz")

#########################
#### General Outputs ####
#########################
rule all:
    input: 
        # FastQC for raw reads
        expand("../resources/Outputs/fastqc_rawreads/{sample}_{rf}.html", sample=SAMPLES, rf=RF), 
        # Trimmed reads
        expand("../resources/Outputs/trimmed_reads/{sample}_{rf}.fastq.gz", sample=SAMPLES, rf=RF), 
        # FastQC for trimmed reads
        expand("../results/fastqc_clean_reads/{sample}_{rf}.html", sample=SAMPLES, rf=RF),
        # Assembly outputs
        expand("../results/assembly/{sample}/contigs.fasta", sample=SAMPLES)

#################################
#### Quality Check raw reads ####
#################################
rule fastqc_rr:
    input:
        reads="../resources/Data/{sample}_{rf}.fastq.gz"
    output: 
        html="../resources/Outputs/fastqc_rawreads/{sample}_{rf}.html",
        zip="../resources/Outputs/fastqc_rawreads/{sample}_{rf}_fastqc.zip"
    params:
        extra="--quiet"
    threads:
        4
    resources:
        mem_mb=4000
    log:
        "../resources/Logs/fastqc_rawreads/{sample}_{rf}.log"
    conda:
        "../envs/fastqc_env.yaml"
    wrapper:
        "v6.0.0/bio/fastqc"

###################################
#### Quality Control raw reads ####
###################################
rule trimmomatic_rr:
    input:
        r1="../resources/Data/{sample}_R1.fastq.gz",
        r2="../resources/Data/{sample}_R2.fastq.gz"
    output:
        r1="../resources/Outputs/trimmed_reads/{sample}_R1.fastq.gz", 
        r2="../resources/Outputs/trimmed_reads/{sample}_R2.fastq.gz", 
        r1_unpaired="../resources/Outputs/trimmomatic/{sample}_R1.unpaired.fastq.gz", 
        r2_unpaired="../resources/Outputs/trimmomatic/{sample}_R2.unpaired.fastq.gz"
    log:
        "../resources/Logs/trimmomatic/{sample}.log"
    conda:
        "../envs/trimmomatic_env.yaml"
    params:
        trimmer=["TRAILING:15", 
                 "LEADING:15",
                 "ILLUMINACLIP:../resources/adapters/TruSeq3-PE.fa:2:30:10:2:keepBothReads",
                 "MINLEN:50"],
        compression_level="-9"
    threads: 
        4
    resources:
        mem_mb=8000
    wrapper:
        "v6.0.0/bio/trimmomatic/pe"



############################################
#### Decontamination (Host reads removal####
############################################
rule decontamination:
    input: 
        r1 = rules.trimmomatic_rr.output.r1,
        r2 = rules.trimmomatic_rr.output.r2, 
        index = "../resources/Databases/swine_genome/swine_genome.fna"
    output:
        r1_clean = "../resources/Outputs/clean_reads/{sample}_R1.fastq.gz", 
        r2_clean = "../resources/Outputs/clean_reads/{sample}_R2.fastq.gz"
    log:
        "../resources/Logs/host_removal/{sample}.log"
    threads:
        40
    conda:
        "../envs/bwa_env.yaml"
    shell:
        """
        bwa mem -t {threads} {input.index} \
            {input.r1} {input.r2} | samtools view -bS - | \
            samtools fastq -f 12 -F 256 -1 {output.r1_clean} -2 {output.r2_clean} - > /dev/null 2>> {log}
        """


#####################################
#### Quality check trimmed reads ####
#####################################
rule fastqc_tr:
    input:
        reads="../resources/Outputs/clean_reads/{sample}_{rf}.fastq.gz"
    output: 
        html="../results/fastqc_clean_reads/{sample}_{rf}.html",
        zip="../results/fastqc_clean_reads/{sample}_{rf}_fastqc.zip"
    params:
        extra="--quiet"
    threads:
        40
    resources:
        mem_mb=4000
    log:
        "../resources/Logs/fastqc_tr/{sample}_{rf}.log"
    conda:
        "../envs/fastqc_env.yaml"
    wrapper:
        "v6.0.0/bio/fastqc"

#####################
#### Co-Assembly ####
#####################
rule coassemble:
    input:
        reads=[rules.decontamination.output.r1_clean, rules.decontamination.output.r2_clean]
    output:
        contigs="../results/assembly/{sample}/contigs.fasta",
        scaffolds="../results/assembly/{sample}/scaffolds.fasta",
        dir=directory("../results/assembly/{sample}/intermediate_files")
    log:
        "../resources/Logs/assembly/{sample}.log"
    benchmark:
        "../resources/Logs/benchmarks/assembly/{sample}.txt"
    resources:
        cores=4
    threads:
        40
    resources:
        mem_mb=15000
    wrapper:
        "v6.0.0/bio/spades/metaspades"

